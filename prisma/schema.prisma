generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PageStatus {
  DRAFT
  PUBLISHED
}

model Workspace {
  id              String           @id @default(cuid())
  name            String
  slug            String           @unique
  brandTokens     Json
  locations       Json?
  webhookUrl      String?
  pages           Page[]
  memberships     WorkspaceMember[]
  formSubmissions FormSubmission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  role        String    @default("admin")
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())

  @@unique([workspaceId, userId])
}

model User {
  id            String             @id @default(cuid())
  email         String             @unique
  name          String?
  image         String?
  memberships   WorkspaceMember[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
}

model Page {
  id              String           @id @default(cuid())
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  workspaceId     String
  title           String
  slug            String
  status          PageStatus       @default(DRAFT)
  schema          Json
  seo             Json?
  publishedAt     DateTime?
  revalidateAfter Int              @default(60)
  formSubmissions FormSubmission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@unique([workspaceId, slug])
}

model FormSubmission {
  id          String   @id @default(cuid())
  page        Page     @relation(fields: [pageId], references: [id])
  pageId      String
  data        Json
  webhookSent Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
